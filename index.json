[{"name":"binary","qualifiedName":"binary","href":"binary/binary-library.html","kind":9,"overriddenDepth":0,"packageRank":0,"desc":"Utilities for working with binary data and fixed-width integers within\nDart."},{"name":"BitList","qualifiedName":"binary.BitList","href":"binary/BitList-class.html","kind":3,"overriddenDepth":0,"packageRank":0,"desc":"An variant of List&lt;bool&gt; that ensures each bool takes one bit of memory.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"BitList","qualifiedName":"binary.BitList.BitList","href":"binary/BitList/BitList.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a list of booleans with the provided length.","enclosedBy":{"name":"BitList","kind":3,"href":"binary/BitList-class.html"}},{"name":"BitList.from","qualifiedName":"binary.BitList.from","href":"binary/BitList/BitList.from.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a list of booleans from the provided bits.","enclosedBy":{"name":"BitList","kind":3,"href":"binary/BitList-class.html"}},{"name":"BitList.fromInt","qualifiedName":"binary.BitList.fromInt","href":"binary/BitList/BitList.fromInt.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a list of booleans that uses the provided integer as initial bits.","enclosedBy":{"name":"BitList","kind":3,"href":"binary/BitList-class.html"}},{"name":"toUint32List","qualifiedName":"binary.BitList.toUint32List","href":"binary/BitList/toUint32List.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a reference to the underlying bytes.","enclosedBy":{"name":"BitList","kind":3,"href":"binary/BitList-class.html"}},{"name":"Int8","qualifiedName":"binary.Int8","href":"binary/Int8-extension-type.html","kind":7,"overriddenDepth":0,"packageRank":0,"desc":"A signed 8-bit integer.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator %","qualifiedName":"binary.Int8.%","href":"binary/Int8/operator_modulo.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Euclidean modulo of this number by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator &","qualifiedName":"binary.Int8.&","href":"binary/Int8/operator_bitwise_and.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise and operator.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator *","qualifiedName":"binary.Int8.*","href":"binary/Int8/operator_multiply.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator +","qualifiedName":"binary.Int8.+","href":"binary/Int8/operator_plus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator -","qualifiedName":"binary.Int8.-","href":"binary/Int8/operator_minus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator <<","qualifiedName":"binary.Int8.<<","href":"binary/Int8/operator_shift_left.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator >>","qualifiedName":"binary.Int8.>>","href":"binary/Int8/operator_shift_right.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the right by shiftAmount.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator >>>","qualifiedName":"binary.Int8.>>>","href":"binary/Int8/operator_triple_shift.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"Int8","qualifiedName":"binary.Int8.Int8","href":"binary/Int8/Int8.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 8-bit integer, wrapping if necessary.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator []","qualifiedName":"binary.Int8.[]","href":"binary/Int8/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator ^","qualifiedName":"binary.Int8.^","href":"binary/Int8/operator_bitwise_exclusive_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise exclusive-or operator.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"abs","qualifiedName":"binary.Int8.abs","href":"binary/Int8/abs.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"bitLength","qualifiedName":"binary.Int8.bitLength","href":"binary/Int8/bitLength.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the minimum number of bits required to store this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"checkRange","qualifiedName":"binary.Int8.checkRange","href":"binary/Int8/checkRange.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns value if its in a valid range for Int8.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"chunk","qualifiedName":"binary.Int8.chunk","href":"binary/Int8/chunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Int8 with bits in left to size.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clamp","qualifiedName":"binary.Int8.clamp","href":"binary/Int8/clamp.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Returns this clamped to be in the range of lowerLimit and\nupperLimit.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedAbs","qualifiedName":"binary.Int8.clampedAbs","href":"binary/Int8/clampedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedAdd","qualifiedName":"binary.Int8.clampedAdd","href":"binary/Int8/clampedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedMultiply","qualifiedName":"binary.Int8.clampedMultiply","href":"binary/Int8/clampedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedNegate","qualifiedName":"binary.Int8.clampedNegate","href":"binary/Int8/clampedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedNextMultipleOf","qualifiedName":"binary.Int8.clampedNextMultipleOf","href":"binary/Int8/clampedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedNextPowerOf2","qualifiedName":"binary.Int8.clampedNextPowerOf2","href":"binary/Int8/clampedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedPow","qualifiedName":"binary.Int8.clampedPow","href":"binary/Int8/clampedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedShiftLeft","qualifiedName":"binary.Int8.clampedShiftLeft","href":"binary/Int8/clampedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedSubtract","qualifiedName":"binary.Int8.clampedSubtract","href":"binary/Int8/clampedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"clampedUnsignedShiftRight","qualifiedName":"binary.Int8.clampedUnsignedShiftRight","href":"binary/Int8/clampedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.Int8.countLeadingZeros","href":"binary/Int8/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of\nthis.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"countOnes","qualifiedName":"binary.Int8.countOnes","href":"binary/Int8/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 1s in the binary representation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.Int8.countTrailingOnes","href":"binary/Int8/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.Int8.countTrailingZeros","href":"binary/Int8/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of\nthis.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"countZeros","qualifiedName":"binary.Int8.countZeros","href":"binary/Int8/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 0s in the binary representation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"Int8.fromClamped","qualifiedName":"binary.Int8.fromClamped","href":"binary/Int8/Int8.fromClamped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 8-bit integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"Int8.fromHiLo","qualifiedName":"binary.Int8.fromHiLo","href":"binary/Int8/Int8.fromHiLo.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a Int8 using two integers as high and low bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"Int8.fromUnchecked","qualifiedName":"binary.Int8.fromUnchecked","href":"binary/Int8/Int8.fromUnchecked.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 8-bit integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"Int8.fromWrapped","qualifiedName":"binary.Int8.fromWrapped","href":"binary/Int8/Int8.fromWrapped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 8-bit integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"hiLo","qualifiedName":"binary.Int8.hiLo","href":"binary/Int8/hiLo.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns this integer split into two parts: high and low bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"isMax","qualifiedName":"binary.Int8.isMax","href":"binary/Int8/isMax.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the maximum value representable by this type.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"isMin","qualifiedName":"binary.Int8.isMin","href":"binary/Int8/isMin.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the minimum value representable by this type.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"isPositive","qualifiedName":"binary.Int8.isPositive","href":"binary/Int8/isPositive.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is positive.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"isValid","qualifiedName":"binary.Int8.isValid","href":"binary/Int8/isValid.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether v is in a valid range for Int8.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"isZero","qualifiedName":"binary.Int8.isZero","href":"binary/Int8/isZero.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is zero.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"log","qualifiedName":"binary.Int8.log","href":"binary/Int8/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"log2","qualifiedName":"binary.Int8.log2","href":"binary/Int8/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"log10","qualifiedName":"binary.Int8.log10","href":"binary/Int8/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"max","qualifiedName":"binary.Int8.max","href":"binary/Int8/max-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"maxInt","qualifiedName":"binary.Int8.maxInt","href":"binary/Int8/maxInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent, as a plain int.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"midpoint","qualifiedName":"binary.Int8.midpoint","href":"binary/Int8/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other, rounded down.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"min","qualifiedName":"binary.Int8.min","href":"binary/Int8/min-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"minInt","qualifiedName":"binary.Int8.minInt","href":"binary/Int8/minInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent, as a plain int.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"msb","qualifiedName":"binary.Int8.msb","href":"binary/Int8/msb.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the most significant bit is set.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.Int8.nextMultipleOf","href":"binary/Int8/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.Int8.nextPowerOf2","href":"binary/Int8/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"nthBit","qualifiedName":"binary.Int8.nthBit","href":"binary/Int8/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"one","qualifiedName":"binary.Int8.one","href":"binary/Int8/one-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 1.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"pow","qualifiedName":"binary.Int8.pow","href":"binary/Int8/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"remainder","qualifiedName":"binary.Int8.remainder","href":"binary/Int8/remainder.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The remainder of the truncating division of this by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"replace","qualifiedName":"binary.Int8.replace","href":"binary/Int8/replace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"rotateLeft","qualifiedName":"binary.Int8.rotateLeft","href":"binary/Int8/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the left by n positions.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"rotateRight","qualifiedName":"binary.Int8.rotateRight","href":"binary/Int8/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the right by n positions.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"setNthBit","qualifiedName":"binary.Int8.setNthBit","href":"binary/Int8/setNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"sign","qualifiedName":"binary.Int8.sign","href":"binary/Int8/sign.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the sign of this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"signedRightShift","qualifiedName":"binary.Int8.signedRightShift","href":"binary/Int8/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise signed right shift by shiftAmount bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"slice","qualifiedName":"binary.Int8.slice","href":"binary/Int8/slice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"sqrt","qualifiedName":"binary.Int8.sqrt","href":"binary/Int8/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"toBinaryString","qualifiedName":"binary.Int8.toBinaryString","href":"binary/Int8/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns this as a binary string.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"toBitList","qualifiedName":"binary.Int8.toBitList","href":"binary/Int8/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"toggleNthBit","qualifiedName":"binary.Int8.toggleNthBit","href":"binary/Int8/toggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryAbs","qualifiedName":"binary.Int8.tryAbs","href":"binary/Int8/tryAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryAdd","qualifiedName":"binary.Int8.tryAdd","href":"binary/Int8/tryAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryFrom","qualifiedName":"binary.Int8.tryFrom","href":"binary/Int8/tryFrom.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 8-bit integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryMultiply","qualifiedName":"binary.Int8.tryMultiply","href":"binary/Int8/tryMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryNegate","qualifiedName":"binary.Int8.tryNegate","href":"binary/Int8/tryNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryNextMultipleOf","qualifiedName":"binary.Int8.tryNextMultipleOf","href":"binary/Int8/tryNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryNextPowerOf2","qualifiedName":"binary.Int8.tryNextPowerOf2","href":"binary/Int8/tryNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryPow","qualifiedName":"binary.Int8.tryPow","href":"binary/Int8/tryPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryShiftLeft","qualifiedName":"binary.Int8.tryShiftLeft","href":"binary/Int8/tryShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"trySubtract","qualifiedName":"binary.Int8.trySubtract","href":"binary/Int8/trySubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"tryUnsignedShiftRight","qualifiedName":"binary.Int8.tryUnsignedShiftRight","href":"binary/Int8/tryUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator unary-","qualifiedName":"binary.Int8.unary-","href":"binary/Int8/operator_unary_minus.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedAbs","qualifiedName":"binary.Int8.uncheckedAbs","href":"binary/Int8/uncheckedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedAdd","qualifiedName":"binary.Int8.uncheckedAdd","href":"binary/Int8/uncheckedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.Int8.uncheckedChunk","href":"binary/Int8/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Int8 with bits in left to size.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedMultiply","qualifiedName":"binary.Int8.uncheckedMultiply","href":"binary/Int8/uncheckedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedNegate","qualifiedName":"binary.Int8.uncheckedNegate","href":"binary/Int8/uncheckedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedNextMultipleOf","qualifiedName":"binary.Int8.uncheckedNextMultipleOf","href":"binary/Int8/uncheckedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedNextPowerOf2","qualifiedName":"binary.Int8.uncheckedNextPowerOf2","href":"binary/Int8/uncheckedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedPow","qualifiedName":"binary.Int8.uncheckedPow","href":"binary/Int8/uncheckedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.Int8.uncheckedReplace","href":"binary/Int8/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.Int8.uncheckedSetNthBit","href":"binary/Int8/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedShiftLeft","qualifiedName":"binary.Int8.uncheckedShiftLeft","href":"binary/Int8/uncheckedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.Int8.uncheckedSlice","href":"binary/Int8/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedSubtract","qualifiedName":"binary.Int8.uncheckedSubtract","href":"binary/Int8/uncheckedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.Int8.uncheckedToggleNthBit","href":"binary/Int8/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"uncheckedUnsignedShiftRight","qualifiedName":"binary.Int8.uncheckedUnsignedShiftRight","href":"binary/Int8/uncheckedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"width","qualifiedName":"binary.Int8.width","href":"binary/Int8/width-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The number of bits used to represent values of this type.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedAbs","qualifiedName":"binary.Int8.wrappedAbs","href":"binary/Int8/wrappedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedAdd","qualifiedName":"binary.Int8.wrappedAdd","href":"binary/Int8/wrappedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedMultiply","qualifiedName":"binary.Int8.wrappedMultiply","href":"binary/Int8/wrappedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedNegate","qualifiedName":"binary.Int8.wrappedNegate","href":"binary/Int8/wrappedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedNextMultipleOf","qualifiedName":"binary.Int8.wrappedNextMultipleOf","href":"binary/Int8/wrappedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedNextPowerOf2","qualifiedName":"binary.Int8.wrappedNextPowerOf2","href":"binary/Int8/wrappedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedPow","qualifiedName":"binary.Int8.wrappedPow","href":"binary/Int8/wrappedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedShiftLeft","qualifiedName":"binary.Int8.wrappedShiftLeft","href":"binary/Int8/wrappedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedSubtract","qualifiedName":"binary.Int8.wrappedSubtract","href":"binary/Int8/wrappedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"wrappedUnsignedShiftRight","qualifiedName":"binary.Int8.wrappedUnsignedShiftRight","href":"binary/Int8/wrappedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"zero","qualifiedName":"binary.Int8.zero","href":"binary/Int8/zero-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 0.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator |","qualifiedName":"binary.Int8.|","href":"binary/Int8/operator_bitwise_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise or operator.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator ~","qualifiedName":"binary.Int8.~","href":"binary/Int8/operator_bitwise_negate.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The bit-wise negate operator.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"operator ~/","qualifiedName":"binary.Int8.~/","href":"binary/Int8/operator_truncate_divide.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Truncating division operator.","enclosedBy":{"name":"Int8","kind":7,"href":"binary/Int8-extension-type.html"}},{"name":"Int16","qualifiedName":"binary.Int16","href":"binary/Int16-extension-type.html","kind":7,"overriddenDepth":0,"packageRank":0,"desc":"A signed 16-bit integer.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator %","qualifiedName":"binary.Int16.%","href":"binary/Int16/operator_modulo.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Euclidean modulo of this number by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator &","qualifiedName":"binary.Int16.&","href":"binary/Int16/operator_bitwise_and.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise and operator.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator *","qualifiedName":"binary.Int16.*","href":"binary/Int16/operator_multiply.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator +","qualifiedName":"binary.Int16.+","href":"binary/Int16/operator_plus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator -","qualifiedName":"binary.Int16.-","href":"binary/Int16/operator_minus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator <<","qualifiedName":"binary.Int16.<<","href":"binary/Int16/operator_shift_left.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator >>","qualifiedName":"binary.Int16.>>","href":"binary/Int16/operator_shift_right.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the right by shiftAmount.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator >>>","qualifiedName":"binary.Int16.>>>","href":"binary/Int16/operator_triple_shift.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"Int16","qualifiedName":"binary.Int16.Int16","href":"binary/Int16/Int16.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 16-bit integer, wrapping if necessary.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator []","qualifiedName":"binary.Int16.[]","href":"binary/Int16/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator ^","qualifiedName":"binary.Int16.^","href":"binary/Int16/operator_bitwise_exclusive_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise exclusive-or operator.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"abs","qualifiedName":"binary.Int16.abs","href":"binary/Int16/abs.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"bitLength","qualifiedName":"binary.Int16.bitLength","href":"binary/Int16/bitLength.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the minimum number of bits required to store this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"checkRange","qualifiedName":"binary.Int16.checkRange","href":"binary/Int16/checkRange.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns value if its in a valid range for Int16.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"chunk","qualifiedName":"binary.Int16.chunk","href":"binary/Int16/chunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Int16 with bits in left to size.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clamp","qualifiedName":"binary.Int16.clamp","href":"binary/Int16/clamp.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Returns this clamped to be in the range of lowerLimit and\nupperLimit.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedAbs","qualifiedName":"binary.Int16.clampedAbs","href":"binary/Int16/clampedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedAdd","qualifiedName":"binary.Int16.clampedAdd","href":"binary/Int16/clampedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedMultiply","qualifiedName":"binary.Int16.clampedMultiply","href":"binary/Int16/clampedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedNegate","qualifiedName":"binary.Int16.clampedNegate","href":"binary/Int16/clampedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedNextMultipleOf","qualifiedName":"binary.Int16.clampedNextMultipleOf","href":"binary/Int16/clampedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedNextPowerOf2","qualifiedName":"binary.Int16.clampedNextPowerOf2","href":"binary/Int16/clampedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedPow","qualifiedName":"binary.Int16.clampedPow","href":"binary/Int16/clampedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedShiftLeft","qualifiedName":"binary.Int16.clampedShiftLeft","href":"binary/Int16/clampedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedSubtract","qualifiedName":"binary.Int16.clampedSubtract","href":"binary/Int16/clampedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"clampedUnsignedShiftRight","qualifiedName":"binary.Int16.clampedUnsignedShiftRight","href":"binary/Int16/clampedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.Int16.countLeadingZeros","href":"binary/Int16/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of\nthis.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"countOnes","qualifiedName":"binary.Int16.countOnes","href":"binary/Int16/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 1s in the binary representation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.Int16.countTrailingOnes","href":"binary/Int16/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.Int16.countTrailingZeros","href":"binary/Int16/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of\nthis.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"countZeros","qualifiedName":"binary.Int16.countZeros","href":"binary/Int16/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 0s in the binary representation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"Int16.fromClamped","qualifiedName":"binary.Int16.fromClamped","href":"binary/Int16/Int16.fromClamped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 16-bit integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"Int16.fromHiLo","qualifiedName":"binary.Int16.fromHiLo","href":"binary/Int16/Int16.fromHiLo.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a Int16 using two integers as high and low bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"Int16.fromUnchecked","qualifiedName":"binary.Int16.fromUnchecked","href":"binary/Int16/Int16.fromUnchecked.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 16-bit integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"Int16.fromWrapped","qualifiedName":"binary.Int16.fromWrapped","href":"binary/Int16/Int16.fromWrapped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 16-bit integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"hiLo","qualifiedName":"binary.Int16.hiLo","href":"binary/Int16/hiLo.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns this integer split into two parts: high and low bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"isMax","qualifiedName":"binary.Int16.isMax","href":"binary/Int16/isMax.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the maximum value representable by this type.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"isMin","qualifiedName":"binary.Int16.isMin","href":"binary/Int16/isMin.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the minimum value representable by this type.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"isPositive","qualifiedName":"binary.Int16.isPositive","href":"binary/Int16/isPositive.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is positive.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"isValid","qualifiedName":"binary.Int16.isValid","href":"binary/Int16/isValid.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether v is in a valid range for Int16.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"isZero","qualifiedName":"binary.Int16.isZero","href":"binary/Int16/isZero.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is zero.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"log","qualifiedName":"binary.Int16.log","href":"binary/Int16/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"log2","qualifiedName":"binary.Int16.log2","href":"binary/Int16/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"log10","qualifiedName":"binary.Int16.log10","href":"binary/Int16/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"max","qualifiedName":"binary.Int16.max","href":"binary/Int16/max-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"maxInt","qualifiedName":"binary.Int16.maxInt","href":"binary/Int16/maxInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent, as a plain int.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"midpoint","qualifiedName":"binary.Int16.midpoint","href":"binary/Int16/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other, rounded down.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"min","qualifiedName":"binary.Int16.min","href":"binary/Int16/min-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"minInt","qualifiedName":"binary.Int16.minInt","href":"binary/Int16/minInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent, as a plain int.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"msb","qualifiedName":"binary.Int16.msb","href":"binary/Int16/msb.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the most significant bit is set.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.Int16.nextMultipleOf","href":"binary/Int16/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.Int16.nextPowerOf2","href":"binary/Int16/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"nthBit","qualifiedName":"binary.Int16.nthBit","href":"binary/Int16/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"one","qualifiedName":"binary.Int16.one","href":"binary/Int16/one-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 1.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"pow","qualifiedName":"binary.Int16.pow","href":"binary/Int16/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"remainder","qualifiedName":"binary.Int16.remainder","href":"binary/Int16/remainder.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The remainder of the truncating division of this by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"replace","qualifiedName":"binary.Int16.replace","href":"binary/Int16/replace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"rotateLeft","qualifiedName":"binary.Int16.rotateLeft","href":"binary/Int16/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the left by n positions.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"rotateRight","qualifiedName":"binary.Int16.rotateRight","href":"binary/Int16/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the right by n positions.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"setNthBit","qualifiedName":"binary.Int16.setNthBit","href":"binary/Int16/setNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"sign","qualifiedName":"binary.Int16.sign","href":"binary/Int16/sign.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the sign of this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"signedRightShift","qualifiedName":"binary.Int16.signedRightShift","href":"binary/Int16/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise signed right shift by shiftAmount bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"slice","qualifiedName":"binary.Int16.slice","href":"binary/Int16/slice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"sqrt","qualifiedName":"binary.Int16.sqrt","href":"binary/Int16/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"toBinaryString","qualifiedName":"binary.Int16.toBinaryString","href":"binary/Int16/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns this as a binary string.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"toBitList","qualifiedName":"binary.Int16.toBitList","href":"binary/Int16/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"toggleNthBit","qualifiedName":"binary.Int16.toggleNthBit","href":"binary/Int16/toggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryAbs","qualifiedName":"binary.Int16.tryAbs","href":"binary/Int16/tryAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryAdd","qualifiedName":"binary.Int16.tryAdd","href":"binary/Int16/tryAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryFrom","qualifiedName":"binary.Int16.tryFrom","href":"binary/Int16/tryFrom.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 16-bit integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryMultiply","qualifiedName":"binary.Int16.tryMultiply","href":"binary/Int16/tryMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryNegate","qualifiedName":"binary.Int16.tryNegate","href":"binary/Int16/tryNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryNextMultipleOf","qualifiedName":"binary.Int16.tryNextMultipleOf","href":"binary/Int16/tryNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryNextPowerOf2","qualifiedName":"binary.Int16.tryNextPowerOf2","href":"binary/Int16/tryNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryPow","qualifiedName":"binary.Int16.tryPow","href":"binary/Int16/tryPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryShiftLeft","qualifiedName":"binary.Int16.tryShiftLeft","href":"binary/Int16/tryShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"trySubtract","qualifiedName":"binary.Int16.trySubtract","href":"binary/Int16/trySubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"tryUnsignedShiftRight","qualifiedName":"binary.Int16.tryUnsignedShiftRight","href":"binary/Int16/tryUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator unary-","qualifiedName":"binary.Int16.unary-","href":"binary/Int16/operator_unary_minus.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedAbs","qualifiedName":"binary.Int16.uncheckedAbs","href":"binary/Int16/uncheckedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedAdd","qualifiedName":"binary.Int16.uncheckedAdd","href":"binary/Int16/uncheckedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.Int16.uncheckedChunk","href":"binary/Int16/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Int16 with bits in left to size.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedMultiply","qualifiedName":"binary.Int16.uncheckedMultiply","href":"binary/Int16/uncheckedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedNegate","qualifiedName":"binary.Int16.uncheckedNegate","href":"binary/Int16/uncheckedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedNextMultipleOf","qualifiedName":"binary.Int16.uncheckedNextMultipleOf","href":"binary/Int16/uncheckedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedNextPowerOf2","qualifiedName":"binary.Int16.uncheckedNextPowerOf2","href":"binary/Int16/uncheckedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedPow","qualifiedName":"binary.Int16.uncheckedPow","href":"binary/Int16/uncheckedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.Int16.uncheckedReplace","href":"binary/Int16/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.Int16.uncheckedSetNthBit","href":"binary/Int16/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedShiftLeft","qualifiedName":"binary.Int16.uncheckedShiftLeft","href":"binary/Int16/uncheckedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.Int16.uncheckedSlice","href":"binary/Int16/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedSubtract","qualifiedName":"binary.Int16.uncheckedSubtract","href":"binary/Int16/uncheckedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.Int16.uncheckedToggleNthBit","href":"binary/Int16/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"uncheckedUnsignedShiftRight","qualifiedName":"binary.Int16.uncheckedUnsignedShiftRight","href":"binary/Int16/uncheckedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"width","qualifiedName":"binary.Int16.width","href":"binary/Int16/width-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The number of bits used to represent values of this type.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedAbs","qualifiedName":"binary.Int16.wrappedAbs","href":"binary/Int16/wrappedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedAdd","qualifiedName":"binary.Int16.wrappedAdd","href":"binary/Int16/wrappedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedMultiply","qualifiedName":"binary.Int16.wrappedMultiply","href":"binary/Int16/wrappedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedNegate","qualifiedName":"binary.Int16.wrappedNegate","href":"binary/Int16/wrappedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedNextMultipleOf","qualifiedName":"binary.Int16.wrappedNextMultipleOf","href":"binary/Int16/wrappedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedNextPowerOf2","qualifiedName":"binary.Int16.wrappedNextPowerOf2","href":"binary/Int16/wrappedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedPow","qualifiedName":"binary.Int16.wrappedPow","href":"binary/Int16/wrappedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedShiftLeft","qualifiedName":"binary.Int16.wrappedShiftLeft","href":"binary/Int16/wrappedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedSubtract","qualifiedName":"binary.Int16.wrappedSubtract","href":"binary/Int16/wrappedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"wrappedUnsignedShiftRight","qualifiedName":"binary.Int16.wrappedUnsignedShiftRight","href":"binary/Int16/wrappedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"zero","qualifiedName":"binary.Int16.zero","href":"binary/Int16/zero-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 0.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator |","qualifiedName":"binary.Int16.|","href":"binary/Int16/operator_bitwise_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise or operator.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator ~","qualifiedName":"binary.Int16.~","href":"binary/Int16/operator_bitwise_negate.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The bit-wise negate operator.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"operator ~/","qualifiedName":"binary.Int16.~/","href":"binary/Int16/operator_truncate_divide.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Truncating division operator.","enclosedBy":{"name":"Int16","kind":7,"href":"binary/Int16-extension-type.html"}},{"name":"Int32","qualifiedName":"binary.Int32","href":"binary/Int32-extension-type.html","kind":7,"overriddenDepth":0,"packageRank":0,"desc":"A signed 32-bit integer.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator %","qualifiedName":"binary.Int32.%","href":"binary/Int32/operator_modulo.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Euclidean modulo of this number by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator &","qualifiedName":"binary.Int32.&","href":"binary/Int32/operator_bitwise_and.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise and operator.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator *","qualifiedName":"binary.Int32.*","href":"binary/Int32/operator_multiply.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator +","qualifiedName":"binary.Int32.+","href":"binary/Int32/operator_plus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator -","qualifiedName":"binary.Int32.-","href":"binary/Int32/operator_minus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator <<","qualifiedName":"binary.Int32.<<","href":"binary/Int32/operator_shift_left.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator >>","qualifiedName":"binary.Int32.>>","href":"binary/Int32/operator_shift_right.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the right by shiftAmount.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator >>>","qualifiedName":"binary.Int32.>>>","href":"binary/Int32/operator_triple_shift.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"Int32","qualifiedName":"binary.Int32.Int32","href":"binary/Int32/Int32.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 32-bit integer, wrapping if necessary.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator []","qualifiedName":"binary.Int32.[]","href":"binary/Int32/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator ^","qualifiedName":"binary.Int32.^","href":"binary/Int32/operator_bitwise_exclusive_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise exclusive-or operator.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"abs","qualifiedName":"binary.Int32.abs","href":"binary/Int32/abs.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"bitLength","qualifiedName":"binary.Int32.bitLength","href":"binary/Int32/bitLength.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the minimum number of bits required to store this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"checkRange","qualifiedName":"binary.Int32.checkRange","href":"binary/Int32/checkRange.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns value if its in a valid range for Int32.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"chunk","qualifiedName":"binary.Int32.chunk","href":"binary/Int32/chunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Int32 with bits in left to size.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clamp","qualifiedName":"binary.Int32.clamp","href":"binary/Int32/clamp.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Returns this clamped to be in the range of lowerLimit and\nupperLimit.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedAbs","qualifiedName":"binary.Int32.clampedAbs","href":"binary/Int32/clampedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedAdd","qualifiedName":"binary.Int32.clampedAdd","href":"binary/Int32/clampedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedMultiply","qualifiedName":"binary.Int32.clampedMultiply","href":"binary/Int32/clampedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedNegate","qualifiedName":"binary.Int32.clampedNegate","href":"binary/Int32/clampedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedNextMultipleOf","qualifiedName":"binary.Int32.clampedNextMultipleOf","href":"binary/Int32/clampedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedNextPowerOf2","qualifiedName":"binary.Int32.clampedNextPowerOf2","href":"binary/Int32/clampedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedPow","qualifiedName":"binary.Int32.clampedPow","href":"binary/Int32/clampedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedShiftLeft","qualifiedName":"binary.Int32.clampedShiftLeft","href":"binary/Int32/clampedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedSubtract","qualifiedName":"binary.Int32.clampedSubtract","href":"binary/Int32/clampedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"clampedUnsignedShiftRight","qualifiedName":"binary.Int32.clampedUnsignedShiftRight","href":"binary/Int32/clampedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.Int32.countLeadingZeros","href":"binary/Int32/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of\nthis.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"countOnes","qualifiedName":"binary.Int32.countOnes","href":"binary/Int32/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 1s in the binary representation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.Int32.countTrailingOnes","href":"binary/Int32/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.Int32.countTrailingZeros","href":"binary/Int32/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of\nthis.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"countZeros","qualifiedName":"binary.Int32.countZeros","href":"binary/Int32/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 0s in the binary representation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"Int32.fromClamped","qualifiedName":"binary.Int32.fromClamped","href":"binary/Int32/Int32.fromClamped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 32-bit integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"Int32.fromHiLo","qualifiedName":"binary.Int32.fromHiLo","href":"binary/Int32/Int32.fromHiLo.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a Int32 using two integers as high and low bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"Int32.fromUnchecked","qualifiedName":"binary.Int32.fromUnchecked","href":"binary/Int32/Int32.fromUnchecked.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 32-bit integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"Int32.fromWrapped","qualifiedName":"binary.Int32.fromWrapped","href":"binary/Int32/Int32.fromWrapped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 32-bit integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"hiLo","qualifiedName":"binary.Int32.hiLo","href":"binary/Int32/hiLo.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns this integer split into two parts: high and low bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"isMax","qualifiedName":"binary.Int32.isMax","href":"binary/Int32/isMax.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the maximum value representable by this type.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"isMin","qualifiedName":"binary.Int32.isMin","href":"binary/Int32/isMin.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the minimum value representable by this type.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"isPositive","qualifiedName":"binary.Int32.isPositive","href":"binary/Int32/isPositive.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is positive.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"isValid","qualifiedName":"binary.Int32.isValid","href":"binary/Int32/isValid.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether v is in a valid range for Int32.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"isZero","qualifiedName":"binary.Int32.isZero","href":"binary/Int32/isZero.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is zero.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"log","qualifiedName":"binary.Int32.log","href":"binary/Int32/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"log2","qualifiedName":"binary.Int32.log2","href":"binary/Int32/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"log10","qualifiedName":"binary.Int32.log10","href":"binary/Int32/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"max","qualifiedName":"binary.Int32.max","href":"binary/Int32/max-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"maxInt","qualifiedName":"binary.Int32.maxInt","href":"binary/Int32/maxInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent, as a plain int.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"midpoint","qualifiedName":"binary.Int32.midpoint","href":"binary/Int32/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other, rounded down.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"min","qualifiedName":"binary.Int32.min","href":"binary/Int32/min-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"minInt","qualifiedName":"binary.Int32.minInt","href":"binary/Int32/minInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent, as a plain int.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"msb","qualifiedName":"binary.Int32.msb","href":"binary/Int32/msb.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the most significant bit is set.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.Int32.nextMultipleOf","href":"binary/Int32/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.Int32.nextPowerOf2","href":"binary/Int32/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"nthBit","qualifiedName":"binary.Int32.nthBit","href":"binary/Int32/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"one","qualifiedName":"binary.Int32.one","href":"binary/Int32/one-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 1.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"pow","qualifiedName":"binary.Int32.pow","href":"binary/Int32/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"remainder","qualifiedName":"binary.Int32.remainder","href":"binary/Int32/remainder.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The remainder of the truncating division of this by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"replace","qualifiedName":"binary.Int32.replace","href":"binary/Int32/replace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"rotateLeft","qualifiedName":"binary.Int32.rotateLeft","href":"binary/Int32/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the left by n positions.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"rotateRight","qualifiedName":"binary.Int32.rotateRight","href":"binary/Int32/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the right by n positions.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"setNthBit","qualifiedName":"binary.Int32.setNthBit","href":"binary/Int32/setNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"sign","qualifiedName":"binary.Int32.sign","href":"binary/Int32/sign.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the sign of this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"signedRightShift","qualifiedName":"binary.Int32.signedRightShift","href":"binary/Int32/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise signed right shift by shiftAmount bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"slice","qualifiedName":"binary.Int32.slice","href":"binary/Int32/slice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"sqrt","qualifiedName":"binary.Int32.sqrt","href":"binary/Int32/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"toBinaryString","qualifiedName":"binary.Int32.toBinaryString","href":"binary/Int32/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns this as a binary string.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"toBitList","qualifiedName":"binary.Int32.toBitList","href":"binary/Int32/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"toggleNthBit","qualifiedName":"binary.Int32.toggleNthBit","href":"binary/Int32/toggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryAbs","qualifiedName":"binary.Int32.tryAbs","href":"binary/Int32/tryAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryAdd","qualifiedName":"binary.Int32.tryAdd","href":"binary/Int32/tryAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryFrom","qualifiedName":"binary.Int32.tryFrom","href":"binary/Int32/tryFrom.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as A signed 32-bit integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryMultiply","qualifiedName":"binary.Int32.tryMultiply","href":"binary/Int32/tryMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryNegate","qualifiedName":"binary.Int32.tryNegate","href":"binary/Int32/tryNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryNextMultipleOf","qualifiedName":"binary.Int32.tryNextMultipleOf","href":"binary/Int32/tryNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryNextPowerOf2","qualifiedName":"binary.Int32.tryNextPowerOf2","href":"binary/Int32/tryNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryPow","qualifiedName":"binary.Int32.tryPow","href":"binary/Int32/tryPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryShiftLeft","qualifiedName":"binary.Int32.tryShiftLeft","href":"binary/Int32/tryShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"trySubtract","qualifiedName":"binary.Int32.trySubtract","href":"binary/Int32/trySubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"tryUnsignedShiftRight","qualifiedName":"binary.Int32.tryUnsignedShiftRight","href":"binary/Int32/tryUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator unary-","qualifiedName":"binary.Int32.unary-","href":"binary/Int32/operator_unary_minus.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedAbs","qualifiedName":"binary.Int32.uncheckedAbs","href":"binary/Int32/uncheckedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedAdd","qualifiedName":"binary.Int32.uncheckedAdd","href":"binary/Int32/uncheckedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.Int32.uncheckedChunk","href":"binary/Int32/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Int32 with bits in left to size.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedMultiply","qualifiedName":"binary.Int32.uncheckedMultiply","href":"binary/Int32/uncheckedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedNegate","qualifiedName":"binary.Int32.uncheckedNegate","href":"binary/Int32/uncheckedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedNextMultipleOf","qualifiedName":"binary.Int32.uncheckedNextMultipleOf","href":"binary/Int32/uncheckedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedNextPowerOf2","qualifiedName":"binary.Int32.uncheckedNextPowerOf2","href":"binary/Int32/uncheckedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedPow","qualifiedName":"binary.Int32.uncheckedPow","href":"binary/Int32/uncheckedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.Int32.uncheckedReplace","href":"binary/Int32/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.Int32.uncheckedSetNthBit","href":"binary/Int32/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedShiftLeft","qualifiedName":"binary.Int32.uncheckedShiftLeft","href":"binary/Int32/uncheckedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.Int32.uncheckedSlice","href":"binary/Int32/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedSubtract","qualifiedName":"binary.Int32.uncheckedSubtract","href":"binary/Int32/uncheckedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.Int32.uncheckedToggleNthBit","href":"binary/Int32/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"uncheckedUnsignedShiftRight","qualifiedName":"binary.Int32.uncheckedUnsignedShiftRight","href":"binary/Int32/uncheckedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"width","qualifiedName":"binary.Int32.width","href":"binary/Int32/width-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The number of bits used to represent values of this type.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedAbs","qualifiedName":"binary.Int32.wrappedAbs","href":"binary/Int32/wrappedAbs.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the absolute value of this integer.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedAdd","qualifiedName":"binary.Int32.wrappedAdd","href":"binary/Int32/wrappedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedMultiply","qualifiedName":"binary.Int32.wrappedMultiply","href":"binary/Int32/wrappedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedNegate","qualifiedName":"binary.Int32.wrappedNegate","href":"binary/Int32/wrappedNegate.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedNextMultipleOf","qualifiedName":"binary.Int32.wrappedNextMultipleOf","href":"binary/Int32/wrappedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedNextPowerOf2","qualifiedName":"binary.Int32.wrappedNextPowerOf2","href":"binary/Int32/wrappedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedPow","qualifiedName":"binary.Int32.wrappedPow","href":"binary/Int32/wrappedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedShiftLeft","qualifiedName":"binary.Int32.wrappedShiftLeft","href":"binary/Int32/wrappedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedSubtract","qualifiedName":"binary.Int32.wrappedSubtract","href":"binary/Int32/wrappedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"wrappedUnsignedShiftRight","qualifiedName":"binary.Int32.wrappedUnsignedShiftRight","href":"binary/Int32/wrappedUnsignedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"zero","qualifiedName":"binary.Int32.zero","href":"binary/Int32/zero-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 0.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator |","qualifiedName":"binary.Int32.|","href":"binary/Int32/operator_bitwise_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise or operator.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator ~","qualifiedName":"binary.Int32.~","href":"binary/Int32/operator_bitwise_negate.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The bit-wise negate operator.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"operator ~/","qualifiedName":"binary.Int32.~/","href":"binary/Int32/operator_truncate_divide.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Truncating division operator.","enclosedBy":{"name":"Int32","kind":7,"href":"binary/Int32-extension-type.html"}},{"name":"IntDescriptor","qualifiedName":"binary.IntDescriptor","href":"binary/IntDescriptor-class.html","kind":3,"overriddenDepth":0,"packageRank":0,"desc":"A descriptor for a fixed-width integer type T.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator ==","qualifiedName":"binary.IntDescriptor.==","href":"binary/IntDescriptor/operator_equals.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The equality operator.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"countLeadingOnes","qualifiedName":"binary.IntDescriptor.countLeadingOnes","href":"binary/IntDescriptor/countLeadingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading ones in the binary representation of v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.IntDescriptor.countLeadingZeros","href":"binary/IntDescriptor/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"countOnes","qualifiedName":"binary.IntDescriptor.countOnes","href":"binary/IntDescriptor/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of ones in the binary representation of v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.IntDescriptor.countTrailingOnes","href":"binary/IntDescriptor/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.IntDescriptor.countTrailingZeros","href":"binary/IntDescriptor/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"countZeros","qualifiedName":"binary.IntDescriptor.countZeros","href":"binary/IntDescriptor/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of zeros in the binary representation of v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"fit","qualifiedName":"binary.IntDescriptor.fit","href":"binary/IntDescriptor/fit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Asserts that v fits within the range of the integer descriptor.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"fitChecked","qualifiedName":"binary.IntDescriptor.fitChecked","href":"binary/IntDescriptor/fitChecked.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Checks if v fits within the range of the integer descriptor.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"fitClamping","qualifiedName":"binary.IntDescriptor.fitClamping","href":"binary/IntDescriptor/fitClamping.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Clamps v to fit within the range of the integer descriptor.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"fitWrapped","qualifiedName":"binary.IntDescriptor.fitWrapped","href":"binary/IntDescriptor/fitWrapped.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Wraps v to fit within the range of the integer descriptor.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"fromHiLo","qualifiedName":"binary.IntDescriptor.fromHiLo","href":"binary/IntDescriptor/fromHiLo.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a T with the provided high and low bits.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"hashCode","qualifiedName":"binary.IntDescriptor.hashCode","href":"binary/IntDescriptor/hashCode.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"The hash code for this object.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"hiLo","qualifiedName":"binary.IntDescriptor.hiLo","href":"binary/IntDescriptor/hiLo.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the v split into two parts: the high and low bits.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"max","qualifiedName":"binary.IntDescriptor.max","href":"binary/IntDescriptor/max.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Represents the maximum integer value of type T, inclusive.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"min","qualifiedName":"binary.IntDescriptor.min","href":"binary/IntDescriptor/min.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Represents the minimum integer value of type T.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"overflowingShiftLeft","qualifiedName":"binary.IntDescriptor.overflowingShiftLeft","href":"binary/IntDescriptor/overflowingShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Similar to int.operator &lt;&lt;, but consistent across platforms.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"rotateLeft","qualifiedName":"binary.IntDescriptor.rotateLeft","href":"binary/IntDescriptor/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in v to the left by n positions.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"rotateRight","qualifiedName":"binary.IntDescriptor.rotateRight","href":"binary/IntDescriptor/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in v to the right by n positions.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"IntDescriptor.signed","qualifiedName":"binary.IntDescriptor.signed","href":"binary/IntDescriptor/IntDescriptor.signed.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a new descriptor for a fixed-width signed integer of type T.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"signed","qualifiedName":"binary.IntDescriptor.signed","href":"binary/IntDescriptor/signed.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether the integer is signed.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"signedRightShift","qualifiedName":"binary.IntDescriptor.signedRightShift","href":"binary/IntDescriptor/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns v arithmetically right-shifted by n bits.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"toBinaryString","qualifiedName":"binary.IntDescriptor.toBinaryString","href":"binary/IntDescriptor/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns v as a binary string.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"toBitList","qualifiedName":"binary.IntDescriptor.toBitList","href":"binary/IntDescriptor/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"toString","qualifiedName":"binary.IntDescriptor.toString","href":"binary/IntDescriptor/toString.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"A string representation of this object.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedBinaryAnd","qualifiedName":"binary.IntDescriptor.uncheckedBinaryAnd","href":"binary/IntDescriptor/uncheckedBinaryAnd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Similar to int.operator &amp;, but consistent across platforms.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedBinaryNot","qualifiedName":"binary.IntDescriptor.uncheckedBinaryNot","href":"binary/IntDescriptor/uncheckedBinaryNot.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Similar to int.operator ~, but consistent across platforms.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedBinaryOr","qualifiedName":"binary.IntDescriptor.uncheckedBinaryOr","href":"binary/IntDescriptor/uncheckedBinaryOr.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Similar to int.operator |, but consistent across platforms.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedBinaryXor","qualifiedName":"binary.IntDescriptor.uncheckedBinaryXor","href":"binary/IntDescriptor/uncheckedBinaryXor.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Similar to int.operator ^, but consistent across platforms.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.IntDescriptor.uncheckedChunk","href":"binary/IntDescriptor/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits in left to size.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.IntDescriptor.uncheckedReplace","href":"binary/IntDescriptor/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Replaces bits left to right, inclusive, with the same number of bits\nfrom replacement.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.IntDescriptor.uncheckedSetNthBit","href":"binary/IntDescriptor/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets and returns the nth bit in v to value.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedShiftRight","qualifiedName":"binary.IntDescriptor.uncheckedShiftRight","href":"binary/IntDescriptor/uncheckedShiftRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Similar to int.operator &gt;&gt;, but consistent across platforms.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.IntDescriptor.uncheckedSlice","href":"binary/IntDescriptor/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.IntDescriptor.uncheckedToggleNthBit","href":"binary/IntDescriptor/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles and returns the nth bit in v.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"IntDescriptor.unsigned","qualifiedName":"binary.IntDescriptor.unsigned","href":"binary/IntDescriptor/IntDescriptor.unsigned.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a new descriptor for a fixed-width unsigned integer of type T.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"unsigned","qualifiedName":"binary.IntDescriptor.unsigned","href":"binary/IntDescriptor/unsigned.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether the integer is unsigned.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"width","qualifiedName":"binary.IntDescriptor.width","href":"binary/IntDescriptor/width.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"The width of the integer in bits.","enclosedBy":{"name":"IntDescriptor","kind":3,"href":"binary/IntDescriptor-class.html"}},{"name":"IntExtension","qualifiedName":"binary.IntExtension","href":"binary/IntExtension.html","kind":6,"overriddenDepth":0,"packageRank":0,"desc":"Additional functionality for any integer, without size restrictions.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator []","qualifiedName":"binary.IntExtension.[]","href":"binary/IntExtension/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"isPowerOf2","qualifiedName":"binary.IntExtension.isPowerOf2","href":"binary/IntExtension/isPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns true iff value == 2^n for some integer n.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"log","qualifiedName":"binary.IntExtension.log","href":"binary/IntExtension/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"log2","qualifiedName":"binary.IntExtension.log2","href":"binary/IntExtension/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"log10","qualifiedName":"binary.IntExtension.log10","href":"binary/IntExtension/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"midpoint","qualifiedName":"binary.IntExtension.midpoint","href":"binary/IntExtension/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.IntExtension.nextMultipleOf","href":"binary/IntExtension/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.IntExtension.nextPowerOf2","href":"binary/IntExtension/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"nthBit","qualifiedName":"binary.IntExtension.nthBit","href":"binary/IntExtension/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"pow","qualifiedName":"binary.IntExtension.pow","href":"binary/IntExtension/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponentiation of this integer with the given exponent.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"sqrt","qualifiedName":"binary.IntExtension.sqrt","href":"binary/IntExtension/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"IntExtension","kind":6,"href":"binary/IntExtension.html"}},{"name":"Uint8","qualifiedName":"binary.Uint8","href":"binary/Uint8-extension-type.html","kind":7,"overriddenDepth":0,"packageRank":0,"desc":"An unsigned 8-bit integer.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator %","qualifiedName":"binary.Uint8.%","href":"binary/Uint8/operator_modulo.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Euclidean modulo of this number by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator &","qualifiedName":"binary.Uint8.&","href":"binary/Uint8/operator_bitwise_and.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise and operator.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator *","qualifiedName":"binary.Uint8.*","href":"binary/Uint8/operator_multiply.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator +","qualifiedName":"binary.Uint8.+","href":"binary/Uint8/operator_plus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator -","qualifiedName":"binary.Uint8.-","href":"binary/Uint8/operator_minus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator <<","qualifiedName":"binary.Uint8.<<","href":"binary/Uint8/operator_shift_left.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator >>","qualifiedName":"binary.Uint8.>>","href":"binary/Uint8/operator_shift_right.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the right by shiftAmount.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator >>>","qualifiedName":"binary.Uint8.>>>","href":"binary/Uint8/operator_triple_shift.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"Uint8","qualifiedName":"binary.Uint8.Uint8","href":"binary/Uint8/Uint8.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 8-bit integer, wrapping if necessary.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator []","qualifiedName":"binary.Uint8.[]","href":"binary/Uint8/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator ^","qualifiedName":"binary.Uint8.^","href":"binary/Uint8/operator_bitwise_exclusive_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise exclusive-or operator.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"bitLength","qualifiedName":"binary.Uint8.bitLength","href":"binary/Uint8/bitLength.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the minimum number of bits required to store this integer.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"checkRange","qualifiedName":"binary.Uint8.checkRange","href":"binary/Uint8/checkRange.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns value if its in a valid range for Uint8.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"chunk","qualifiedName":"binary.Uint8.chunk","href":"binary/Uint8/chunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Uint8 with bits in left to size.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clamp","qualifiedName":"binary.Uint8.clamp","href":"binary/Uint8/clamp.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Returns this clamped to be in the range of lowerLimit and\nupperLimit.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedAdd","qualifiedName":"binary.Uint8.clampedAdd","href":"binary/Uint8/clampedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedMultiply","qualifiedName":"binary.Uint8.clampedMultiply","href":"binary/Uint8/clampedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedNextMultipleOf","qualifiedName":"binary.Uint8.clampedNextMultipleOf","href":"binary/Uint8/clampedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedNextPowerOf2","qualifiedName":"binary.Uint8.clampedNextPowerOf2","href":"binary/Uint8/clampedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedPow","qualifiedName":"binary.Uint8.clampedPow","href":"binary/Uint8/clampedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedShiftLeft","qualifiedName":"binary.Uint8.clampedShiftLeft","href":"binary/Uint8/clampedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"clampedSubtract","qualifiedName":"binary.Uint8.clampedSubtract","href":"binary/Uint8/clampedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"countLeadingOnes","qualifiedName":"binary.Uint8.countLeadingOnes","href":"binary/Uint8/countLeadingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading ones in the binary representation of this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.Uint8.countLeadingZeros","href":"binary/Uint8/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of\nthis.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"countOnes","qualifiedName":"binary.Uint8.countOnes","href":"binary/Uint8/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 1s in the binary representation of this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.Uint8.countTrailingOnes","href":"binary/Uint8/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.Uint8.countTrailingZeros","href":"binary/Uint8/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of\nthis.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"countZeros","qualifiedName":"binary.Uint8.countZeros","href":"binary/Uint8/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 0s in the binary representation of this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"Uint8.fromClamped","qualifiedName":"binary.Uint8.fromClamped","href":"binary/Uint8/Uint8.fromClamped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 8-bit integer.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"Uint8.fromHiLo","qualifiedName":"binary.Uint8.fromHiLo","href":"binary/Uint8/Uint8.fromHiLo.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a Uint8 using two integers as high and low bits.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"Uint8.fromUnchecked","qualifiedName":"binary.Uint8.fromUnchecked","href":"binary/Uint8/Uint8.fromUnchecked.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 8-bit integer.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"Uint8.fromWrapped","qualifiedName":"binary.Uint8.fromWrapped","href":"binary/Uint8/Uint8.fromWrapped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 8-bit integer.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"hiLo","qualifiedName":"binary.Uint8.hiLo","href":"binary/Uint8/hiLo.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns this integer split into two parts: high and low bits.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"isMax","qualifiedName":"binary.Uint8.isMax","href":"binary/Uint8/isMax.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the maximum value representable by this type.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"isMin","qualifiedName":"binary.Uint8.isMin","href":"binary/Uint8/isMin.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the minimum value representable by this type.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"isPositive","qualifiedName":"binary.Uint8.isPositive","href":"binary/Uint8/isPositive.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is positive.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"isValid","qualifiedName":"binary.Uint8.isValid","href":"binary/Uint8/isValid.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether v is in a valid range for Uint8.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"isZero","qualifiedName":"binary.Uint8.isZero","href":"binary/Uint8/isZero.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is zero.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"log","qualifiedName":"binary.Uint8.log","href":"binary/Uint8/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"log2","qualifiedName":"binary.Uint8.log2","href":"binary/Uint8/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"log10","qualifiedName":"binary.Uint8.log10","href":"binary/Uint8/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"max","qualifiedName":"binary.Uint8.max","href":"binary/Uint8/max-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"maxInt","qualifiedName":"binary.Uint8.maxInt","href":"binary/Uint8/maxInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent, as a plain int.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"midpoint","qualifiedName":"binary.Uint8.midpoint","href":"binary/Uint8/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other, rounded down.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"min","qualifiedName":"binary.Uint8.min","href":"binary/Uint8/min-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"minInt","qualifiedName":"binary.Uint8.minInt","href":"binary/Uint8/minInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent, as a plain int.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"msb","qualifiedName":"binary.Uint8.msb","href":"binary/Uint8/msb.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the most significant bit is set.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.Uint8.nextMultipleOf","href":"binary/Uint8/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.Uint8.nextPowerOf2","href":"binary/Uint8/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"nthBit","qualifiedName":"binary.Uint8.nthBit","href":"binary/Uint8/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"one","qualifiedName":"binary.Uint8.one","href":"binary/Uint8/one-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 1.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"pow","qualifiedName":"binary.Uint8.pow","href":"binary/Uint8/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"remainder","qualifiedName":"binary.Uint8.remainder","href":"binary/Uint8/remainder.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The remainder of the truncating division of this by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"replace","qualifiedName":"binary.Uint8.replace","href":"binary/Uint8/replace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"rotateLeft","qualifiedName":"binary.Uint8.rotateLeft","href":"binary/Uint8/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the left by n positions.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"rotateRight","qualifiedName":"binary.Uint8.rotateRight","href":"binary/Uint8/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the right by n positions.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"setNthBit","qualifiedName":"binary.Uint8.setNthBit","href":"binary/Uint8/setNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"signedRightShift","qualifiedName":"binary.Uint8.signedRightShift","href":"binary/Uint8/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise signed right shift by shiftAmount bits.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"slice","qualifiedName":"binary.Uint8.slice","href":"binary/Uint8/slice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"sqrt","qualifiedName":"binary.Uint8.sqrt","href":"binary/Uint8/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"toBinaryString","qualifiedName":"binary.Uint8.toBinaryString","href":"binary/Uint8/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns this as a binary string.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"toBitList","qualifiedName":"binary.Uint8.toBitList","href":"binary/Uint8/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing this integer.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"toggleNthBit","qualifiedName":"binary.Uint8.toggleNthBit","href":"binary/Uint8/toggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryAdd","qualifiedName":"binary.Uint8.tryAdd","href":"binary/Uint8/tryAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryFrom","qualifiedName":"binary.Uint8.tryFrom","href":"binary/Uint8/tryFrom.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 8-bit integer.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryMultiply","qualifiedName":"binary.Uint8.tryMultiply","href":"binary/Uint8/tryMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryNextMultipleOf","qualifiedName":"binary.Uint8.tryNextMultipleOf","href":"binary/Uint8/tryNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryNextPowerOf2","qualifiedName":"binary.Uint8.tryNextPowerOf2","href":"binary/Uint8/tryNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryPow","qualifiedName":"binary.Uint8.tryPow","href":"binary/Uint8/tryPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"tryShiftLeft","qualifiedName":"binary.Uint8.tryShiftLeft","href":"binary/Uint8/tryShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"trySubtract","qualifiedName":"binary.Uint8.trySubtract","href":"binary/Uint8/trySubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator unary-","qualifiedName":"binary.Uint8.unary-","href":"binary/Uint8/operator_unary_minus.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedAdd","qualifiedName":"binary.Uint8.uncheckedAdd","href":"binary/Uint8/uncheckedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.Uint8.uncheckedChunk","href":"binary/Uint8/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Uint8 with bits in left to size.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedMultiply","qualifiedName":"binary.Uint8.uncheckedMultiply","href":"binary/Uint8/uncheckedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedNextMultipleOf","qualifiedName":"binary.Uint8.uncheckedNextMultipleOf","href":"binary/Uint8/uncheckedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedNextPowerOf2","qualifiedName":"binary.Uint8.uncheckedNextPowerOf2","href":"binary/Uint8/uncheckedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedPow","qualifiedName":"binary.Uint8.uncheckedPow","href":"binary/Uint8/uncheckedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.Uint8.uncheckedReplace","href":"binary/Uint8/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.Uint8.uncheckedSetNthBit","href":"binary/Uint8/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedShiftLeft","qualifiedName":"binary.Uint8.uncheckedShiftLeft","href":"binary/Uint8/uncheckedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.Uint8.uncheckedSlice","href":"binary/Uint8/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedSubtract","qualifiedName":"binary.Uint8.uncheckedSubtract","href":"binary/Uint8/uncheckedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.Uint8.uncheckedToggleNthBit","href":"binary/Uint8/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"width","qualifiedName":"binary.Uint8.width","href":"binary/Uint8/width-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The number of bits used to represent values of this type.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedAdd","qualifiedName":"binary.Uint8.wrappedAdd","href":"binary/Uint8/wrappedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedMultiply","qualifiedName":"binary.Uint8.wrappedMultiply","href":"binary/Uint8/wrappedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedNextMultipleOf","qualifiedName":"binary.Uint8.wrappedNextMultipleOf","href":"binary/Uint8/wrappedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedNextPowerOf2","qualifiedName":"binary.Uint8.wrappedNextPowerOf2","href":"binary/Uint8/wrappedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedPow","qualifiedName":"binary.Uint8.wrappedPow","href":"binary/Uint8/wrappedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedShiftLeft","qualifiedName":"binary.Uint8.wrappedShiftLeft","href":"binary/Uint8/wrappedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"wrappedSubtract","qualifiedName":"binary.Uint8.wrappedSubtract","href":"binary/Uint8/wrappedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"zero","qualifiedName":"binary.Uint8.zero","href":"binary/Uint8/zero-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 0.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator |","qualifiedName":"binary.Uint8.|","href":"binary/Uint8/operator_bitwise_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise or operator.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator ~","qualifiedName":"binary.Uint8.~","href":"binary/Uint8/operator_bitwise_negate.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The bit-wise negate operator.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"operator ~/","qualifiedName":"binary.Uint8.~/","href":"binary/Uint8/operator_truncate_divide.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Truncating division operator.","enclosedBy":{"name":"Uint8","kind":7,"href":"binary/Uint8-extension-type.html"}},{"name":"Uint16","qualifiedName":"binary.Uint16","href":"binary/Uint16-extension-type.html","kind":7,"overriddenDepth":0,"packageRank":0,"desc":"An unsigned 16-bit integer.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator %","qualifiedName":"binary.Uint16.%","href":"binary/Uint16/operator_modulo.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Euclidean modulo of this number by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator &","qualifiedName":"binary.Uint16.&","href":"binary/Uint16/operator_bitwise_and.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise and operator.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator *","qualifiedName":"binary.Uint16.*","href":"binary/Uint16/operator_multiply.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator +","qualifiedName":"binary.Uint16.+","href":"binary/Uint16/operator_plus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator -","qualifiedName":"binary.Uint16.-","href":"binary/Uint16/operator_minus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator <<","qualifiedName":"binary.Uint16.<<","href":"binary/Uint16/operator_shift_left.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator >>","qualifiedName":"binary.Uint16.>>","href":"binary/Uint16/operator_shift_right.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the right by shiftAmount.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator >>>","qualifiedName":"binary.Uint16.>>>","href":"binary/Uint16/operator_triple_shift.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"Uint16","qualifiedName":"binary.Uint16.Uint16","href":"binary/Uint16/Uint16.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 16-bit integer, wrapping if necessary.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator []","qualifiedName":"binary.Uint16.[]","href":"binary/Uint16/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator ^","qualifiedName":"binary.Uint16.^","href":"binary/Uint16/operator_bitwise_exclusive_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise exclusive-or operator.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"bitLength","qualifiedName":"binary.Uint16.bitLength","href":"binary/Uint16/bitLength.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the minimum number of bits required to store this integer.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"checkRange","qualifiedName":"binary.Uint16.checkRange","href":"binary/Uint16/checkRange.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns value if its in a valid range for Uint16.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"chunk","qualifiedName":"binary.Uint16.chunk","href":"binary/Uint16/chunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Uint16 with bits in left to size.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clamp","qualifiedName":"binary.Uint16.clamp","href":"binary/Uint16/clamp.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Returns this clamped to be in the range of lowerLimit and\nupperLimit.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedAdd","qualifiedName":"binary.Uint16.clampedAdd","href":"binary/Uint16/clampedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedMultiply","qualifiedName":"binary.Uint16.clampedMultiply","href":"binary/Uint16/clampedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedNextMultipleOf","qualifiedName":"binary.Uint16.clampedNextMultipleOf","href":"binary/Uint16/clampedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedNextPowerOf2","qualifiedName":"binary.Uint16.clampedNextPowerOf2","href":"binary/Uint16/clampedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedPow","qualifiedName":"binary.Uint16.clampedPow","href":"binary/Uint16/clampedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedShiftLeft","qualifiedName":"binary.Uint16.clampedShiftLeft","href":"binary/Uint16/clampedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"clampedSubtract","qualifiedName":"binary.Uint16.clampedSubtract","href":"binary/Uint16/clampedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"countLeadingOnes","qualifiedName":"binary.Uint16.countLeadingOnes","href":"binary/Uint16/countLeadingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading ones in the binary representation of this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.Uint16.countLeadingZeros","href":"binary/Uint16/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of\nthis.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"countOnes","qualifiedName":"binary.Uint16.countOnes","href":"binary/Uint16/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 1s in the binary representation of this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.Uint16.countTrailingOnes","href":"binary/Uint16/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.Uint16.countTrailingZeros","href":"binary/Uint16/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of\nthis.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"countZeros","qualifiedName":"binary.Uint16.countZeros","href":"binary/Uint16/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 0s in the binary representation of this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"Uint16.fromClamped","qualifiedName":"binary.Uint16.fromClamped","href":"binary/Uint16/Uint16.fromClamped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 16-bit integer.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"Uint16.fromHiLo","qualifiedName":"binary.Uint16.fromHiLo","href":"binary/Uint16/Uint16.fromHiLo.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a Uint16 using two integers as high and low bits.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"Uint16.fromUnchecked","qualifiedName":"binary.Uint16.fromUnchecked","href":"binary/Uint16/Uint16.fromUnchecked.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 16-bit integer.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"Uint16.fromWrapped","qualifiedName":"binary.Uint16.fromWrapped","href":"binary/Uint16/Uint16.fromWrapped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 16-bit integer.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"hiLo","qualifiedName":"binary.Uint16.hiLo","href":"binary/Uint16/hiLo.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns this integer split into two parts: high and low bits.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"isMax","qualifiedName":"binary.Uint16.isMax","href":"binary/Uint16/isMax.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the maximum value representable by this type.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"isMin","qualifiedName":"binary.Uint16.isMin","href":"binary/Uint16/isMin.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the minimum value representable by this type.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"isPositive","qualifiedName":"binary.Uint16.isPositive","href":"binary/Uint16/isPositive.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is positive.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"isValid","qualifiedName":"binary.Uint16.isValid","href":"binary/Uint16/isValid.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether v is in a valid range for Uint16.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"isZero","qualifiedName":"binary.Uint16.isZero","href":"binary/Uint16/isZero.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is zero.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"log","qualifiedName":"binary.Uint16.log","href":"binary/Uint16/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"log2","qualifiedName":"binary.Uint16.log2","href":"binary/Uint16/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"log10","qualifiedName":"binary.Uint16.log10","href":"binary/Uint16/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"max","qualifiedName":"binary.Uint16.max","href":"binary/Uint16/max-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"maxInt","qualifiedName":"binary.Uint16.maxInt","href":"binary/Uint16/maxInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent, as a plain int.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"midpoint","qualifiedName":"binary.Uint16.midpoint","href":"binary/Uint16/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other, rounded down.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"min","qualifiedName":"binary.Uint16.min","href":"binary/Uint16/min-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"minInt","qualifiedName":"binary.Uint16.minInt","href":"binary/Uint16/minInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent, as a plain int.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"msb","qualifiedName":"binary.Uint16.msb","href":"binary/Uint16/msb.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the most significant bit is set.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.Uint16.nextMultipleOf","href":"binary/Uint16/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.Uint16.nextPowerOf2","href":"binary/Uint16/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"nthBit","qualifiedName":"binary.Uint16.nthBit","href":"binary/Uint16/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"one","qualifiedName":"binary.Uint16.one","href":"binary/Uint16/one-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 1.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"pow","qualifiedName":"binary.Uint16.pow","href":"binary/Uint16/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"remainder","qualifiedName":"binary.Uint16.remainder","href":"binary/Uint16/remainder.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The remainder of the truncating division of this by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"replace","qualifiedName":"binary.Uint16.replace","href":"binary/Uint16/replace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"rotateLeft","qualifiedName":"binary.Uint16.rotateLeft","href":"binary/Uint16/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the left by n positions.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"rotateRight","qualifiedName":"binary.Uint16.rotateRight","href":"binary/Uint16/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the right by n positions.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"setNthBit","qualifiedName":"binary.Uint16.setNthBit","href":"binary/Uint16/setNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"signedRightShift","qualifiedName":"binary.Uint16.signedRightShift","href":"binary/Uint16/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise signed right shift by shiftAmount bits.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"slice","qualifiedName":"binary.Uint16.slice","href":"binary/Uint16/slice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"sqrt","qualifiedName":"binary.Uint16.sqrt","href":"binary/Uint16/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"toBinaryString","qualifiedName":"binary.Uint16.toBinaryString","href":"binary/Uint16/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns this as a binary string.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"toBitList","qualifiedName":"binary.Uint16.toBitList","href":"binary/Uint16/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing this integer.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"toggleNthBit","qualifiedName":"binary.Uint16.toggleNthBit","href":"binary/Uint16/toggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryAdd","qualifiedName":"binary.Uint16.tryAdd","href":"binary/Uint16/tryAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryFrom","qualifiedName":"binary.Uint16.tryFrom","href":"binary/Uint16/tryFrom.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 16-bit integer.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryMultiply","qualifiedName":"binary.Uint16.tryMultiply","href":"binary/Uint16/tryMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryNextMultipleOf","qualifiedName":"binary.Uint16.tryNextMultipleOf","href":"binary/Uint16/tryNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryNextPowerOf2","qualifiedName":"binary.Uint16.tryNextPowerOf2","href":"binary/Uint16/tryNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryPow","qualifiedName":"binary.Uint16.tryPow","href":"binary/Uint16/tryPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"tryShiftLeft","qualifiedName":"binary.Uint16.tryShiftLeft","href":"binary/Uint16/tryShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"trySubtract","qualifiedName":"binary.Uint16.trySubtract","href":"binary/Uint16/trySubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator unary-","qualifiedName":"binary.Uint16.unary-","href":"binary/Uint16/operator_unary_minus.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedAdd","qualifiedName":"binary.Uint16.uncheckedAdd","href":"binary/Uint16/uncheckedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.Uint16.uncheckedChunk","href":"binary/Uint16/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Uint16 with bits in left to size.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedMultiply","qualifiedName":"binary.Uint16.uncheckedMultiply","href":"binary/Uint16/uncheckedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedNextMultipleOf","qualifiedName":"binary.Uint16.uncheckedNextMultipleOf","href":"binary/Uint16/uncheckedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedNextPowerOf2","qualifiedName":"binary.Uint16.uncheckedNextPowerOf2","href":"binary/Uint16/uncheckedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedPow","qualifiedName":"binary.Uint16.uncheckedPow","href":"binary/Uint16/uncheckedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.Uint16.uncheckedReplace","href":"binary/Uint16/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.Uint16.uncheckedSetNthBit","href":"binary/Uint16/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedShiftLeft","qualifiedName":"binary.Uint16.uncheckedShiftLeft","href":"binary/Uint16/uncheckedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.Uint16.uncheckedSlice","href":"binary/Uint16/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedSubtract","qualifiedName":"binary.Uint16.uncheckedSubtract","href":"binary/Uint16/uncheckedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.Uint16.uncheckedToggleNthBit","href":"binary/Uint16/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"width","qualifiedName":"binary.Uint16.width","href":"binary/Uint16/width-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The number of bits used to represent values of this type.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedAdd","qualifiedName":"binary.Uint16.wrappedAdd","href":"binary/Uint16/wrappedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedMultiply","qualifiedName":"binary.Uint16.wrappedMultiply","href":"binary/Uint16/wrappedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedNextMultipleOf","qualifiedName":"binary.Uint16.wrappedNextMultipleOf","href":"binary/Uint16/wrappedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedNextPowerOf2","qualifiedName":"binary.Uint16.wrappedNextPowerOf2","href":"binary/Uint16/wrappedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedPow","qualifiedName":"binary.Uint16.wrappedPow","href":"binary/Uint16/wrappedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedShiftLeft","qualifiedName":"binary.Uint16.wrappedShiftLeft","href":"binary/Uint16/wrappedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"wrappedSubtract","qualifiedName":"binary.Uint16.wrappedSubtract","href":"binary/Uint16/wrappedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"zero","qualifiedName":"binary.Uint16.zero","href":"binary/Uint16/zero-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 0.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator |","qualifiedName":"binary.Uint16.|","href":"binary/Uint16/operator_bitwise_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise or operator.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator ~","qualifiedName":"binary.Uint16.~","href":"binary/Uint16/operator_bitwise_negate.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The bit-wise negate operator.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"operator ~/","qualifiedName":"binary.Uint16.~/","href":"binary/Uint16/operator_truncate_divide.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Truncating division operator.","enclosedBy":{"name":"Uint16","kind":7,"href":"binary/Uint16-extension-type.html"}},{"name":"Uint32","qualifiedName":"binary.Uint32","href":"binary/Uint32-extension-type.html","kind":7,"overriddenDepth":0,"packageRank":0,"desc":"An unsigned 32-bit integer.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"operator %","qualifiedName":"binary.Uint32.%","href":"binary/Uint32/operator_modulo.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Euclidean modulo of this number by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator &","qualifiedName":"binary.Uint32.&","href":"binary/Uint32/operator_bitwise_and.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise and operator.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator *","qualifiedName":"binary.Uint32.*","href":"binary/Uint32/operator_multiply.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator +","qualifiedName":"binary.Uint32.+","href":"binary/Uint32/operator_plus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator -","qualifiedName":"binary.Uint32.-","href":"binary/Uint32/operator_minus.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator <<","qualifiedName":"binary.Uint32.<<","href":"binary/Uint32/operator_shift_left.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator >>","qualifiedName":"binary.Uint32.>>","href":"binary/Uint32/operator_shift_right.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Shifts the bits of this integer to the right by shiftAmount.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator >>>","qualifiedName":"binary.Uint32.>>>","href":"binary/Uint32/operator_triple_shift.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bitwise unsigned right shift by shiftAmount bits.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"Uint32","qualifiedName":"binary.Uint32.Uint32","href":"binary/Uint32/Uint32.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 32-bit integer, wrapping if necessary.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator []","qualifiedName":"binary.Uint32.[]","href":"binary/Uint32/operator_get.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator ^","qualifiedName":"binary.Uint32.^","href":"binary/Uint32/operator_bitwise_exclusive_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise exclusive-or operator.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"bitLength","qualifiedName":"binary.Uint32.bitLength","href":"binary/Uint32/bitLength.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns the minimum number of bits required to store this integer.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"checkRange","qualifiedName":"binary.Uint32.checkRange","href":"binary/Uint32/checkRange.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns value if its in a valid range for Uint32.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"chunk","qualifiedName":"binary.Uint32.chunk","href":"binary/Uint32/chunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Uint32 with bits in left to size.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clamp","qualifiedName":"binary.Uint32.clamp","href":"binary/Uint32/clamp.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Returns this clamped to be in the range of lowerLimit and\nupperLimit.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedAdd","qualifiedName":"binary.Uint32.clampedAdd","href":"binary/Uint32/clampedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedMultiply","qualifiedName":"binary.Uint32.clampedMultiply","href":"binary/Uint32/clampedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedNextMultipleOf","qualifiedName":"binary.Uint32.clampedNextMultipleOf","href":"binary/Uint32/clampedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedNextPowerOf2","qualifiedName":"binary.Uint32.clampedNextPowerOf2","href":"binary/Uint32/clampedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedPow","qualifiedName":"binary.Uint32.clampedPow","href":"binary/Uint32/clampedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedShiftLeft","qualifiedName":"binary.Uint32.clampedShiftLeft","href":"binary/Uint32/clampedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"clampedSubtract","qualifiedName":"binary.Uint32.clampedSubtract","href":"binary/Uint32/clampedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"countLeadingOnes","qualifiedName":"binary.Uint32.countLeadingOnes","href":"binary/Uint32/countLeadingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading ones in the binary representation of this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"countLeadingZeros","qualifiedName":"binary.Uint32.countLeadingZeros","href":"binary/Uint32/countLeadingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of leading zeros in the binary representation of\nthis.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"countOnes","qualifiedName":"binary.Uint32.countOnes","href":"binary/Uint32/countOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 1s in the binary representation of this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"countTrailingOnes","qualifiedName":"binary.Uint32.countTrailingOnes","href":"binary/Uint32/countTrailingOnes.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing ones in the binary representation of this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"countTrailingZeros","qualifiedName":"binary.Uint32.countTrailingZeros","href":"binary/Uint32/countTrailingZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of trailing zeros in the binary representation of\nthis.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"countZeros","qualifiedName":"binary.Uint32.countZeros","href":"binary/Uint32/countZeros.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the number of 0s in the binary representation of this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"Uint32.fromClamped","qualifiedName":"binary.Uint32.fromClamped","href":"binary/Uint32/Uint32.fromClamped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 32-bit integer.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"Uint32.fromHiLo","qualifiedName":"binary.Uint32.fromHiLo","href":"binary/Uint32/Uint32.fromHiLo.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Creates a Uint32 using two integers as high and low bits.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"Uint32.fromUnchecked","qualifiedName":"binary.Uint32.fromUnchecked","href":"binary/Uint32/Uint32.fromUnchecked.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 32-bit integer.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"Uint32.fromWrapped","qualifiedName":"binary.Uint32.fromWrapped","href":"binary/Uint32/Uint32.fromWrapped.html","kind":2,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 32-bit integer.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"hiLo","qualifiedName":"binary.Uint32.hiLo","href":"binary/Uint32/hiLo.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns this integer split into two parts: high and low bits.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"isMax","qualifiedName":"binary.Uint32.isMax","href":"binary/Uint32/isMax.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the maximum value representable by this type.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"isMin","qualifiedName":"binary.Uint32.isMin","href":"binary/Uint32/isMin.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Whether this integer is the minimum value representable by this type.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"isPositive","qualifiedName":"binary.Uint32.isPositive","href":"binary/Uint32/isPositive.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is positive.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"isValid","qualifiedName":"binary.Uint32.isValid","href":"binary/Uint32/isValid.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether v is in a valid range for Uint32.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"isZero","qualifiedName":"binary.Uint32.isZero","href":"binary/Uint32/isZero.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns true if and only if this integer is zero.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"log","qualifiedName":"binary.Uint32.log","href":"binary/Uint32/log.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the natural logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"log2","qualifiedName":"binary.Uint32.log2","href":"binary/Uint32/log2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 2 logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"log10","qualifiedName":"binary.Uint32.log10","href":"binary/Uint32/log10.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the base 10 logarithm of this integer, rounded down.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"max","qualifiedName":"binary.Uint32.max","href":"binary/Uint32/max-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"maxInt","qualifiedName":"binary.Uint32.maxInt","href":"binary/Uint32/maxInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The maximum value that this type can represent, as a plain int.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"midpoint","qualifiedName":"binary.Uint32.midpoint","href":"binary/Uint32/midpoint.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the midpoint between this integer and other, rounded down.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"min","qualifiedName":"binary.Uint32.min","href":"binary/Uint32/min-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"minInt","qualifiedName":"binary.Uint32.minInt","href":"binary/Uint32/minInt-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The minimum value that this type can represent, as a plain int.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"msb","qualifiedName":"binary.Uint32.msb","href":"binary/Uint32/msb.html","kind":16,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the most significant bit is set.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"nextMultipleOf","qualifiedName":"binary.Uint32.nextMultipleOf","href":"binary/Uint32/nextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"nextPowerOf2","qualifiedName":"binary.Uint32.nextPowerOf2","href":"binary/Uint32/nextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"nthBit","qualifiedName":"binary.Uint32.nthBit","href":"binary/Uint32/nthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns whether the n-th bit is set.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"one","qualifiedName":"binary.Uint32.one","href":"binary/Uint32/one-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 1.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"pow","qualifiedName":"binary.Uint32.pow","href":"binary/Uint32/pow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"remainder","qualifiedName":"binary.Uint32.remainder","href":"binary/Uint32/remainder.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The remainder of the truncating division of this by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"replace","qualifiedName":"binary.Uint32.replace","href":"binary/Uint32/replace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"rotateLeft","qualifiedName":"binary.Uint32.rotateLeft","href":"binary/Uint32/rotateLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the left by n positions.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"rotateRight","qualifiedName":"binary.Uint32.rotateRight","href":"binary/Uint32/rotateRight.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Rotates the bits in this to the right by n positions.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"setNthBit","qualifiedName":"binary.Uint32.setNthBit","href":"binary/Uint32/setNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"signedRightShift","qualifiedName":"binary.Uint32.signedRightShift","href":"binary/Uint32/signedRightShift.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Bitwise signed right shift by shiftAmount bits.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"slice","qualifiedName":"binary.Uint32.slice","href":"binary/Uint32/slice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"sqrt","qualifiedName":"binary.Uint32.sqrt","href":"binary/Uint32/sqrt.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the square root of this integer, rounded down.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"toBinaryString","qualifiedName":"binary.Uint32.toBinaryString","href":"binary/Uint32/toBinaryString.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns this as a binary string.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"toBitList","qualifiedName":"binary.Uint32.toBitList","href":"binary/Uint32/toBitList.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a list of bits representing this integer.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"toggleNthBit","qualifiedName":"binary.Uint32.toggleNthBit","href":"binary/Uint32/toggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryAdd","qualifiedName":"binary.Uint32.tryAdd","href":"binary/Uint32/tryAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryFrom","qualifiedName":"binary.Uint32.tryFrom","href":"binary/Uint32/tryFrom.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Defines v as An unsigned 32-bit integer.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryMultiply","qualifiedName":"binary.Uint32.tryMultiply","href":"binary/Uint32/tryMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryNextMultipleOf","qualifiedName":"binary.Uint32.tryNextMultipleOf","href":"binary/Uint32/tryNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryNextPowerOf2","qualifiedName":"binary.Uint32.tryNextPowerOf2","href":"binary/Uint32/tryNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryPow","qualifiedName":"binary.Uint32.tryPow","href":"binary/Uint32/tryPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"tryShiftLeft","qualifiedName":"binary.Uint32.tryShiftLeft","href":"binary/Uint32/tryShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"trySubtract","qualifiedName":"binary.Uint32.trySubtract","href":"binary/Uint32/trySubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator unary-","qualifiedName":"binary.Uint32.unary-","href":"binary/Uint32/operator_unary_minus.html","kind":10,"overriddenDepth":2,"packageRank":0,"desc":"The negation of this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedAdd","qualifiedName":"binary.Uint32.uncheckedAdd","href":"binary/Uint32/uncheckedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedChunk","qualifiedName":"binary.Uint32.uncheckedChunk","href":"binary/Uint32/uncheckedChunk.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new Uint32 with bits in left to size.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedMultiply","qualifiedName":"binary.Uint32.uncheckedMultiply","href":"binary/Uint32/uncheckedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedNextMultipleOf","qualifiedName":"binary.Uint32.uncheckedNextMultipleOf","href":"binary/Uint32/uncheckedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedNextPowerOf2","qualifiedName":"binary.Uint32.uncheckedNextPowerOf2","href":"binary/Uint32/uncheckedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedPow","qualifiedName":"binary.Uint32.uncheckedPow","href":"binary/Uint32/uncheckedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedReplace","qualifiedName":"binary.Uint32.uncheckedReplace","href":"binary/Uint32/uncheckedReplace.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive, replaced\nwith the same number of bits from replacement.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedSetNthBit","qualifiedName":"binary.Uint32.uncheckedSetNthBit","href":"binary/Uint32/uncheckedSetNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Sets the n-th bit to value, where true is 1 and false is 0.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedShiftLeft","qualifiedName":"binary.Uint32.uncheckedShiftLeft","href":"binary/Uint32/uncheckedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedSlice","qualifiedName":"binary.Uint32.uncheckedSlice","href":"binary/Uint32/uncheckedSlice.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns a new instance with bits left to right, inclusive.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedSubtract","qualifiedName":"binary.Uint32.uncheckedSubtract","href":"binary/Uint32/uncheckedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"uncheckedToggleNthBit","qualifiedName":"binary.Uint32.uncheckedToggleNthBit","href":"binary/Uint32/uncheckedToggleNthBit.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Toggles the n-th bit.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"width","qualifiedName":"binary.Uint32.width","href":"binary/Uint32/width-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"The number of bits used to represent values of this type.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedAdd","qualifiedName":"binary.Uint32.wrappedAdd","href":"binary/Uint32/wrappedAdd.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Adds other to this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedMultiply","qualifiedName":"binary.Uint32.wrappedMultiply","href":"binary/Uint32/wrappedMultiply.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Multiplies this number by other.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedNextMultipleOf","qualifiedName":"binary.Uint32.wrappedNextMultipleOf","href":"binary/Uint32/wrappedNextMultipleOf.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Calculates the smallest value greater than or equal to this that is\na multiple of n.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedNextPowerOf2","qualifiedName":"binary.Uint32.wrappedNextPowerOf2","href":"binary/Uint32/wrappedNextPowerOf2.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the smallest power of two greater than or equal to this.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedPow","qualifiedName":"binary.Uint32.wrappedPow","href":"binary/Uint32/wrappedPow.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Returns the exponention of this integer with the given exponent.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedShiftLeft","qualifiedName":"binary.Uint32.wrappedShiftLeft","href":"binary/Uint32/wrappedShiftLeft.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Shifts the bits of this integer to the left by shiftAmount.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"wrappedSubtract","qualifiedName":"binary.Uint32.wrappedSubtract","href":"binary/Uint32/wrappedSubtract.html","kind":10,"overriddenDepth":0,"packageRank":0,"desc":"Subtracts other from this number.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"zero","qualifiedName":"binary.Uint32.zero","href":"binary/Uint32/zero-constant.html","kind":1,"overriddenDepth":0,"packageRank":0,"desc":"Always 0.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator |","qualifiedName":"binary.Uint32.|","href":"binary/Uint32/operator_bitwise_or.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Bit-wise or operator.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator ~","qualifiedName":"binary.Uint32.~","href":"binary/Uint32/operator_bitwise_negate.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"The bit-wise negate operator.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"operator ~/","qualifiedName":"binary.Uint32.~/","href":"binary/Uint32/operator_truncate_divide.html","kind":10,"overriddenDepth":1,"packageRank":0,"desc":"Truncating division operator.","enclosedBy":{"name":"Uint32","kind":7,"href":"binary/Uint32-extension-type.html"}},{"name":"collectBytes","qualifiedName":"binary.collectBytes","href":"binary/collectBytes.html","kind":8,"overriddenDepth":0,"packageRank":0,"desc":"Collects the bytes of a Stream&lt;List&lt;int&gt;&gt; into a Uint8List.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"debugCheckFixedWithInRange","qualifiedName":"binary.debugCheckFixedWithInRange","href":"binary/debugCheckFixedWithInRange.html","kind":20,"overriddenDepth":0,"packageRank":0,"desc":"Whether some methods on fixed-width integers assert when out of range.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}},{"name":"debugCheckUncheckedInRange","qualifiedName":"binary.debugCheckUncheckedInRange","href":"binary/debugCheckUncheckedInRange-constant.html","kind":19,"overriddenDepth":0,"packageRank":0,"desc":"Whether unchecked methods on fixed-width integers assert when out of\nrange.","enclosedBy":{"name":"binary","kind":9,"href":"binary/binary-library.html"}}]
